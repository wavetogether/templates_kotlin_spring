apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-allopen"

apply from: "$project.rootDir/gradle/scripts/packaging.gradle"
apply from: "restDocs-asciiDoctor.gradle"

def MODULE_APP_LIB = "app-lib"
def MODULE_APP_CORE = "app-core"
def MODULE_APP_MAIN = "app-main"

sourceSets {
    def buildConfig = getBuildConfig()
    println("Building for '$buildConfig' environment")

    main {
        java {
            srcDirs += ["src/$buildConfig/java", "src/$buildConfig/kotlin"]
        }

        resources {
            srcDirs += ["src/$buildConfig/resources"]
        }
    }
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$version_springBoot"

    implementation project(":${MODULE_APP_CORE}")
    implementation project(":${MODULE_APP_LIB}")

    // Spring boot
    implementation "org.springframework.boot:spring-boot-starter:$version_springBoot"
    implementation("org.springframework.boot:spring-boot-starter-web:$version_springBoot") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-validation:$version_springBoot"
    implementation "org.springframework.boot:spring-boot-starter-undertow:$version_springBoot"

    // Jackson Kotlin support
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$version_jackson_kotlin"

    // Spring Data + JPA
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$version_springBoot"
    implementation "com.zaxxer:HikariCP:$version_hikariCP"

    // DBMS: Change this to your favourite database
    implementation "mysql:mysql-connector-java:$version_mysql"

    // Spring boot test
    testImplementation "org.springframework.boot:spring-boot-starter-test:$version_springBootTest"
    testImplementation "com.h2database:h2"

    testImplementation project(path: ":${MODULE_APP_CORE}", configuration: "testArtifacts")
    testImplementation project(path: ":${MODULE_APP_LIB}", configuration: "testArtifacts")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
    }
}

task copyCoreResources(type: Copy) {
    final buildVariants = ["main"]

    buildVariants.forEach {
        from "$project.rootDir/${MODULE_APP_CORE}/src/$it/resources/"
        into "$project.rootDir/${MODULE_APP_MAIN}/build/resources/$it"
    }
}

jar.dependsOn bootJar
// This step resolves resource copy problem which only exists on other('common') module
classes.dependsOn copyCoreResources
